# -*- coding: utf-8 -*-
"""Major project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mjH0KuEh_NOBFO5M0YlvWkWQr84ONbK_
"""

import pandas as pd
import seaborn as sns 
import matplotlib.pyplot as plt
import numpy as np
import datetime
import warnings 
warnings.filterwarnings("ignore")

"""World Data is represnted by w_d"""

# world data will be abbrivated as w_d
w_d = pd.read_csv('/content/drive/My Drive/python/covid-dataset-06-10-20.csv')

w_d.head()

w_d.info()

"""Removing the unnecassary Data Columns"""

w_d = w_d.drop(['continent','female_smokers','male_smokers','handwashing_facilities','new_cases_smoothed','new_deaths_smoothed','new_cases_smoothed_per_million', 'new_deaths_smoothed_per_million','new_tests_smoothed','new_tests_smoothed_per_thousand', 'stringency_index','population','population_density' , 'median_age','aged_65_older','aged_70_older' , 'extreme_poverty','cardiovasc_death_rate','diabetes_prevalence', 'hospital_beds_per_thousand','life_expectancy','human_development_index'] , axis=1)
#w_d = w_d.drop(w_d.columns[[1,6,9,12,15,20,21,25,26,27,28,29,30,33,34]], axis=1 , inplace=True)

print('w_d shape:{}'.format(w_d.shape))
print(w_d.info())

w_d.head()

w_d['date'] = pd.to_datetime(w_d['date'] , format='%Y-%m-%d')

w_d.info()

w_d.isnull().sum()

w_d['date'].nunique()

print('first date {} '.format(w_d['date'].min()))
print('last date {} '.format(w_d['date'].max()))

w_d['iso_code'].unique()

"""Selecting The Rows that are represents the whole world data by the iso code"""

world_data = w_d[w_d['iso_code'] == 'OWID_WRL']

print('world data shape: {}'.format(world_data.shape))

world_data.head()

world_data.info()

world_data.isnull().sum()

"""Dropping Null Values"""

world_data = world_data.dropna(axis ='columns')

world_data.info()

fig_dims = (10,10)
fig, ax = plt.subplots(figsize = fig_dims)
sns.lineplot(x='date', y='total_cases', ax=ax , data = world_data, label='tc')
sns.lineplot(x='date' , y= 'total_deaths' , ax=ax , data = world_data, label='td')
sns.lineplot(x='date' , y= 'new_deaths' , ax=ax , data = world_data, label='nd')
plt.legend()
plt.show()

"""Visualising new cases"""

fig_dims = (10,10)
fig, ax = plt.subplots(figsize = fig_dims)
sns.lineplot(x='date' , y='new_cases', ax=ax ,data = world_data)
plt.show()

#sns.lineplot(x='total_deaths' , y='new_cases', ax=ax ,data = world_data)

"""Making another dataset for Forecasting with fbProphet()"""

world_data_forecast = world_data.groupby('date').agg(Total_Death = ('total_deaths', sum), date = ('date',max))

world_data_forecast = world_data_forecast.rename(columns={'Total_Death':'y','date':'ds'})
world_data_forecast

import fbprophet
op = fbprophet.Prophet()
op.fit(world_data_forecast)

forecast = op.make_future_dataframe(30,'D')
forecast = op.predict(forecast)

"""Forecasting Deaths"""

op.plot(forecast, xlabel='Dates', ylabel='Deaths')
plt.title('Deaths Prediction');

world_case_forecast = world_data.groupby('date').agg(Total_cases = ('total_cases' , sum), date = ('date' , max))
world_case_forecast

figdims = (20,10)
fig ,ax = plt.subplots(figsize = fig_dims)
sns.countplot(world_data['new_cases'], ax=ax)

figdims = (20,30)
fig ,ax = plt.subplots(figsize = fig_dims)
sns.boxplot(x = 'date' , y = 'new_cases',data = world_data, ax=ax)

"""Creating Data for a country[France] by using the iso_code"""

france_data = w_d[w_d['iso_code'] == 'FRA']

france_data.info()

france_data.shape

france_data.isnull().sum()

"""Dropping Null Values in France"""

france_data = france_data.dropna(axis='columns')

france_data.isnull().sum()

france_data.shape

france_data['date'].nunique()

fig_dims = (20,10)
fig ,ax = plt.subplots(figsize=fig_dims)
sns.lineplot(x='date' , y='total_cases', data = france_data , ax=ax)
plt.title('Total Cases Visualisation')

france_data['date'].min()

figdims = (15,10)
fig , ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date' , y='total_deaths' ,label='Total Deaths', ax=ax , data = france_data)
sns.lineplot(x='date' , y='total_cases' ,label='Total Cases', ax=ax ,data =france_data )
plt.title('Total Deaths & Cases Chart')
plt.legend()
plt.show()

figdims = (15,10)
fig , ax =  plt.subplots(figsize=figdims)
sns.lineplot(x='date' ,y='new_cases' , label='New Cases' , ax=ax , data=france_data)
sns.lineplot(x='date' , y='new_deaths' , label= 'New Deaths', ax=ax , data = france_data)
plt.legend()
plt.title('New Cases & Deaths')
plt.show()

figdims =(15,10)
fig ,ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date' , y='total_cases' , ax=ax , data=world_data , label='World Cases')
sns.lineplot(x='date' , y='total_cases' , ax=ax, data= france_data ,label = 'France Cases')
plt.legend()
plt.title('France vs World Total Cases Comparison')
plt.show()

figdims =(15,10)
fig ,ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date' , y='new_cases' , ax=ax , data=world_data , label='World Cases')
sns.lineplot(x='date' , y='new_cases' , ax=ax, data= france_data ,label = 'France Cases')
plt.legend()
plt.title('France vs World New Cases Comparison')
plt.show()

italy_data = w_d[w_d['iso_code'] == 'ITA']

italy_data.shape

italy_data.info()

italy_data = italy_data.dropna('columns')

italy_data.info()

"""Creating a new Variable of Country Italy"""

figdims = (15,10)
fig , ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date', y='total_deaths', data=italy_data, ax=ax , label='Total Deaths')
plt.show()

figdims = (15,10)
fig , ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date', y='total_cases', data=italy_data, ax=ax , label='Total Cases')
plt.show()

figdims = (15,10)
fig , ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date', y='new_deaths', data=italy_data, ax=ax , label='New Deaths')
plt.show()

figdims = (15,10)
fig , ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date', y='new_cases', data=italy_data, ax=ax , label='New Cases')
plt.show()

"""Visualisation of Two Different Coungtry at a Single Graph"""

figdims = (15,10)
fig , ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date', y='new_cases', data=italy_data, ax=ax , label='New Cases')
sns.lineplot(x='date' , y='new_deaths', data = italy_data, ax=ax , label='New Deaths')
plt.legend()
plt.show()

figdims = (15,10)
fig , ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date', y='new_cases', data=italy_data, ax=ax , label='Italy New Cases')
sns.lineplot(x='date' , y='new_cases', data = france_data, ax=ax , label=' France New Cases')
plt.legend()
plt.show()

figdims = (15,10)
fig , ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date', y='new_deaths',data=italy_data , label = 'Italy New Deaths', ax=ax )
sns.lineplot(x='date', y='new_deaths',data=france_data , label = 'France New Deaths', ax=ax )
plt.legend()
plt.title('Italy & Fance Death Comparison')
plt.show()

france_forecast = france_data.groupby('date').agg(new_cases = ('new_cases',sum),date = ('date',max))
france_forecast

france_forecast = france_forecast.rename(columns = {'new_cases':'y', 'date':'ds'})
france_forecast

import fbprophet
fp = fbprophet.Prophet()

fp.fit(france_forecast)

france_forecast_cases = fp.make_future_dataframe(30 ,'D')

france_forecast_cases = fp.predict(france_forecast_cases)

fp.plot(france_forecast_cases , xlabel='Date' , ylabel='New Cases')
plt.title('New Cases Forecast ');

italy_forecast = italy_data.groupby('date').agg(new_cases =('new_cases',sum), date =('date',max))

italy_forecast = italy_forecast.rename(columns ={'new_cases':'y', 'date':'ds'})



ip = fbprophet.Prophet()
ip.fit(italy_forecast)

italy_forecast_cases = ip.make_future_dataframe(30,'D')

italy_forecast_cases = ip.predict(italy_forecast_cases)

ip.plot(italy_forecast_cases, xlabel='Date' ,ylabel='New Cases' )
plt.title('Italy New Cses Forecast')

ip.plot(italy_forecast_cases, xlabel='Date' ,ylabel='New Cases' )
fp.plot(france_forecast_cases , xlabel='Date' , ylabel='New Cases')
plt.legend()

"""Defining  Dataset for INDIA"""

india_data = w_d[w_d['iso_code']=='IND']

india_data.shape

india_data.info()

"""Dropping Empty or Null Values"""

india_data = india_data.dropna()

india_data.shape

india_data.info()

figdims = (15,10)
fig ,ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date' , y='total_cases' , ax=ax , data=india_data)
plt.title('India Total Cases')
plt.show()

figdims = (10,7)
fig ,ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date' , y='new_cases' , data = india_data , ax=ax)
plt.title('INDIA new Cases')
plt.show()

"""Here It is observeable that INDIA has touched a peak & now dropping from that peak."""

figdims = (10,7)
fig ,ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date' , y='new_cases' , data=world_data, ax=ax)
sns.lineplot(x='date' , y='new_cases' , data = india_data , ax=ax)
plt.title('INDIA new Cases')
plt.title('India vs World New Cases Comparion')
plt.legend()
plt.show()

"""The World has not yet touched a Peak but India has done ."""

figdims = (10,7)
fig ,ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date' , y='total_deaths' ,label = 'World Total Test', data = world_data , ax=ax)
sns.lineplot(x='date' , y='total_deaths' ,label = 'India Total Test', data = india_data , ax=ax)
plt.title('INDIA new Cases')
plt.legend()
plt.show()

"""World Graph is Linear but India chart is not acting as a linear graph but as a smoothend exponential graph"""

figdims = (12,6)
fig  , ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date' , y='new_deaths' ,label='World New Deaths', data=world_data ,ax=ax)
sns.lineplot(x='date' , y='new_deaths' ,label='India New Deaths', data =india_data , ax=ax)
plt.title('India vs World New Cases')
plt.legend()
plt.show()

figdims = (10,7)
fig ,ax = plt.subplots(figsize=figdims)
sns.lineplot(x='date' , y='total_cases' ,label='World Total Cases', data=world_data, ax=ax)
sns.lineplot(x='date' , y='total_cases' ,label='India Total Cases', data = india_data , ax=ax)
plt.title('INDIA new Cases')
plt.title('India vs World New Cases Comparion')
plt.legend()
plt.show()

india_forecast = india_data.groupby('date').agg(new_cases=('new_cases',sum) , date = ('date',max))
india_forecast

india_forecast = india_forecast.rename(columns={'new_cases':'y' ,'date':'ds' })

pp= fbprophet.Prophet()

pp.fit(india_forecast)

india_forecast_cases = pp.make_future_dataframe(30 ,'D')

india_forecast_cases = pp.predict(india_forecast_cases)

pp.plot(india_forecast_cases , xlabel='Date' , ylabel='New Cases')
plt.title('India New Cases Forecasting');

